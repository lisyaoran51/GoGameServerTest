// This is Proto v3 syntax。

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: protobuf/diamonds/game.proto

package diamonds

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 玩家請求下注
type DIAMONDS_TS_BET struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tableid   string `protobuf:"bytes,1,opt,name=tableid,proto3" json:"tableid,omitempty"`     // table 資訊
	Currency  string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`   // 幣種
	Betamount string `protobuf:"bytes,3,opt,name=betamount,proto3" json:"betamount,omitempty"` // 下注金額 小數最小只能到0.00000001
	Uuid      string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`           // UUID
}

func (x *DIAMONDS_TS_BET) Reset() {
	*x = DIAMONDS_TS_BET{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_diamonds_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIAMONDS_TS_BET) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIAMONDS_TS_BET) ProtoMessage() {}

func (x *DIAMONDS_TS_BET) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_diamonds_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIAMONDS_TS_BET.ProtoReflect.Descriptor instead.
func (*DIAMONDS_TS_BET) Descriptor() ([]byte, []int) {
	return file_protobuf_diamonds_game_proto_rawDescGZIP(), []int{0}
}

func (x *DIAMONDS_TS_BET) GetTableid() string {
	if x != nil {
		return x.Tableid
	}
	return ""
}

func (x *DIAMONDS_TS_BET) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DIAMONDS_TS_BET) GetBetamount() string {
	if x != nil {
		return x.Betamount
	}
	return ""
}

func (x *DIAMONDS_TS_BET) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// 下注回應
type DIAMONDS_BET_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tableid          string   `protobuf:"bytes,1,opt,name=tableid,proto3" json:"tableid,omitempty"`                   // table 資訊
	Currency         string   `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`                 // 幣種
	Betamount        string   `protobuf:"bytes,3,opt,name=betamount,proto3" json:"betamount,omitempty"`               // 下注金額 小數最小只能到0.00000001
	Code             uint32   `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`                        // 下注結果
	HashedServerSeed string   `protobuf:"bytes,5,opt,name=hashedServerSeed,proto3" json:"hashedServerSeed,omitempty"` // hash過的server seed
	Nounce           uint32   `protobuf:"varint,6,opt,name=nounce,proto3" json:"nounce,omitempty"`                    // 此組seed使用次數
	Gmcode           string   `protobuf:"bytes,7,opt,name=gmcode,proto3" json:"gmcode,omitempty"`                     // 局號
	Bettime          uint64   `protobuf:"varint,8,opt,name=bettime,proto3" json:"bettime,omitempty"`                  // 下注時間
	Win              string   `protobuf:"bytes,9,opt,name=win,proto3" json:"win,omitempty"`                           // 派彩
	Ratio            string   `protobuf:"bytes,10,opt,name=ratio,proto3" json:"ratio,omitempty"`                      // 派彩倍率
	Res              []uint32 `protobuf:"varint,11,rep,packed,name=res,proto3" json:"res,omitempty"`                  // 寶石結果
	Uuid             string   `protobuf:"bytes,12,opt,name=uuid,proto3" json:"uuid,omitempty"`                        // UUID
}

func (x *DIAMONDS_BET_RES) Reset() {
	*x = DIAMONDS_BET_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_diamonds_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIAMONDS_BET_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIAMONDS_BET_RES) ProtoMessage() {}

func (x *DIAMONDS_BET_RES) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_diamonds_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIAMONDS_BET_RES.ProtoReflect.Descriptor instead.
func (*DIAMONDS_BET_RES) Descriptor() ([]byte, []int) {
	return file_protobuf_diamonds_game_proto_rawDescGZIP(), []int{1}
}

func (x *DIAMONDS_BET_RES) GetTableid() string {
	if x != nil {
		return x.Tableid
	}
	return ""
}

func (x *DIAMONDS_BET_RES) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DIAMONDS_BET_RES) GetBetamount() string {
	if x != nil {
		return x.Betamount
	}
	return ""
}

func (x *DIAMONDS_BET_RES) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DIAMONDS_BET_RES) GetHashedServerSeed() string {
	if x != nil {
		return x.HashedServerSeed
	}
	return ""
}

func (x *DIAMONDS_BET_RES) GetNounce() uint32 {
	if x != nil {
		return x.Nounce
	}
	return 0
}

func (x *DIAMONDS_BET_RES) GetGmcode() string {
	if x != nil {
		return x.Gmcode
	}
	return ""
}

func (x *DIAMONDS_BET_RES) GetBettime() uint64 {
	if x != nil {
		return x.Bettime
	}
	return 0
}

func (x *DIAMONDS_BET_RES) GetWin() string {
	if x != nil {
		return x.Win
	}
	return ""
}

func (x *DIAMONDS_BET_RES) GetRatio() string {
	if x != nil {
		return x.Ratio
	}
	return ""
}

func (x *DIAMONDS_BET_RES) GetRes() []uint32 {
	if x != nil {
		return x.Res
	}
	return nil
}

func (x *DIAMONDS_BET_RES) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DIAMONDS_TS_CHANGE_SEED struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tableid          string `protobuf:"bytes,1,opt,name=tableid,proto3" json:"tableid,omitempty"`                   // table 資訊
	Customclientseed string `protobuf:"bytes,2,opt,name=customclientseed,proto3" json:"customclientseed,omitempty"` // 自定義client seed，如果為空字串就由server自產，長度最大128
}

func (x *DIAMONDS_TS_CHANGE_SEED) Reset() {
	*x = DIAMONDS_TS_CHANGE_SEED{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_diamonds_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIAMONDS_TS_CHANGE_SEED) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIAMONDS_TS_CHANGE_SEED) ProtoMessage() {}

func (x *DIAMONDS_TS_CHANGE_SEED) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_diamonds_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIAMONDS_TS_CHANGE_SEED.ProtoReflect.Descriptor instead.
func (*DIAMONDS_TS_CHANGE_SEED) Descriptor() ([]byte, []int) {
	return file_protobuf_diamonds_game_proto_rawDescGZIP(), []int{2}
}

func (x *DIAMONDS_TS_CHANGE_SEED) GetTableid() string {
	if x != nil {
		return x.Tableid
	}
	return ""
}

func (x *DIAMONDS_TS_CHANGE_SEED) GetCustomclientseed() string {
	if x != nil {
		return x.Customclientseed
	}
	return ""
}

type DIAMONDS_CHANGE_SEED_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tableid              string `protobuf:"bytes,1,opt,name=tableid,proto3" json:"tableid,omitempty"`                           // table 資訊
	ClientSeed           string `protobuf:"bytes,2,opt,name=clientSeed,proto3" json:"clientSeed,omitempty"`                     // 換好的client seed
	HashedServerSeed     string `protobuf:"bytes,3,opt,name=hashedServerSeed,proto3" json:"hashedServerSeed,omitempty"`         // 換好的hash過的server seed
	PrevClientSeed       string `protobuf:"bytes,4,opt,name=prevClientSeed,proto3" json:"prevClientSeed,omitempty"`             // 上一組 client seed
	PrevHashedServerSeed string `protobuf:"bytes,5,opt,name=prevHashedServerSeed,proto3" json:"prevHashedServerSeed,omitempty"` // 上一組 server seed，hash的
	PrevServerSeed       string `protobuf:"bytes,6,opt,name=prevServerSeed,proto3" json:"prevServerSeed,omitempty"`             // 上一組 hash過的server seed
	PrevNounce           uint32 `protobuf:"varint,7,opt,name=prevNounce,proto3" json:"prevNounce,omitempty"`                    // 上一組 seed 使用次數
	NextClientSeed       string `protobuf:"bytes,8,opt,name=nextClientSeed,proto3" json:"nextClientSeed,omitempty"`             // 下一組 client seed
	NextHashedServerSeed string `protobuf:"bytes,9,opt,name=nextHashedServerSeed,proto3" json:"nextHashedServerSeed,omitempty"` // 下一組 server seed，hash的
	Code                 uint32 `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`                               // 錯誤代碼 如果有錯誤，前面seed相關資訊會是空值
}

func (x *DIAMONDS_CHANGE_SEED_RES) Reset() {
	*x = DIAMONDS_CHANGE_SEED_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_diamonds_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIAMONDS_CHANGE_SEED_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIAMONDS_CHANGE_SEED_RES) ProtoMessage() {}

func (x *DIAMONDS_CHANGE_SEED_RES) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_diamonds_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIAMONDS_CHANGE_SEED_RES.ProtoReflect.Descriptor instead.
func (*DIAMONDS_CHANGE_SEED_RES) Descriptor() ([]byte, []int) {
	return file_protobuf_diamonds_game_proto_rawDescGZIP(), []int{3}
}

func (x *DIAMONDS_CHANGE_SEED_RES) GetTableid() string {
	if x != nil {
		return x.Tableid
	}
	return ""
}

func (x *DIAMONDS_CHANGE_SEED_RES) GetClientSeed() string {
	if x != nil {
		return x.ClientSeed
	}
	return ""
}

func (x *DIAMONDS_CHANGE_SEED_RES) GetHashedServerSeed() string {
	if x != nil {
		return x.HashedServerSeed
	}
	return ""
}

func (x *DIAMONDS_CHANGE_SEED_RES) GetPrevClientSeed() string {
	if x != nil {
		return x.PrevClientSeed
	}
	return ""
}

func (x *DIAMONDS_CHANGE_SEED_RES) GetPrevHashedServerSeed() string {
	if x != nil {
		return x.PrevHashedServerSeed
	}
	return ""
}

func (x *DIAMONDS_CHANGE_SEED_RES) GetPrevServerSeed() string {
	if x != nil {
		return x.PrevServerSeed
	}
	return ""
}

func (x *DIAMONDS_CHANGE_SEED_RES) GetPrevNounce() uint32 {
	if x != nil {
		return x.PrevNounce
	}
	return 0
}

func (x *DIAMONDS_CHANGE_SEED_RES) GetNextClientSeed() string {
	if x != nil {
		return x.NextClientSeed
	}
	return ""
}

func (x *DIAMONDS_CHANGE_SEED_RES) GetNextHashedServerSeed() string {
	if x != nil {
		return x.NextHashedServerSeed
	}
	return ""
}

func (x *DIAMONDS_CHANGE_SEED_RES) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// 玩家初次登入時收到的資料
type DIAMONDS_INFO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tableid              string `protobuf:"bytes,1,opt,name=tableid,proto3" json:"tableid,omitempty"`                           // table 資訊
	ClientSeed           string `protobuf:"bytes,2,opt,name=clientSeed,proto3" json:"clientSeed,omitempty"`                     // client seed
	HashedServerSeed     string `protobuf:"bytes,3,opt,name=hashedServerSeed,proto3" json:"hashedServerSeed,omitempty"`         // hash過的server seed
	Nounce               uint32 `protobuf:"varint,4,opt,name=nounce,proto3" json:"nounce,omitempty"`                            // 此組seed使用次數
	NextClientSeed       string `protobuf:"bytes,5,opt,name=nextClientSeed,proto3" json:"nextClientSeed,omitempty"`             // 下一組 client seed 此值每次登入都會變換
	NextHashedServerSeed string `protobuf:"bytes,6,opt,name=nextHashedServerSeed,proto3" json:"nextHashedServerSeed,omitempty"` // 下一組 server seed，hash的 此值每次登入都會變換
}

func (x *DIAMONDS_INFO) Reset() {
	*x = DIAMONDS_INFO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_diamonds_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIAMONDS_INFO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIAMONDS_INFO) ProtoMessage() {}

func (x *DIAMONDS_INFO) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_diamonds_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIAMONDS_INFO.ProtoReflect.Descriptor instead.
func (*DIAMONDS_INFO) Descriptor() ([]byte, []int) {
	return file_protobuf_diamonds_game_proto_rawDescGZIP(), []int{4}
}

func (x *DIAMONDS_INFO) GetTableid() string {
	if x != nil {
		return x.Tableid
	}
	return ""
}

func (x *DIAMONDS_INFO) GetClientSeed() string {
	if x != nil {
		return x.ClientSeed
	}
	return ""
}

func (x *DIAMONDS_INFO) GetHashedServerSeed() string {
	if x != nil {
		return x.HashedServerSeed
	}
	return ""
}

func (x *DIAMONDS_INFO) GetNounce() uint32 {
	if x != nil {
		return x.Nounce
	}
	return 0
}

func (x *DIAMONDS_INFO) GetNextClientSeed() string {
	if x != nil {
		return x.NextClientSeed
	}
	return ""
}

func (x *DIAMONDS_INFO) GetNextHashedServerSeed() string {
	if x != nil {
		return x.NextHashedServerSeed
	}
	return ""
}

type DIAMONDS_GAME_INFO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playtype         string `protobuf:"bytes,1,opt,name=playtype,proto3" json:"playtype,omitempty"`                 // 本局的 risk-row
	ClientSeed       string `protobuf:"bytes,2,opt,name=clientSeed,proto3" json:"clientSeed,omitempty"`             // 本局對應的client seed
	HashedServerSeed string `protobuf:"bytes,3,opt,name=hashedServerSeed,proto3" json:"hashedServerSeed,omitempty"` // 本局對應的hash過的server seed
	RealServerSeed   string `protobuf:"bytes,4,opt,name=realServerSeed,proto3" json:"realServerSeed,omitempty"`     // 真正的server seed 如果還沒揭露過，這邊會是空
	Nounce           uint32 `protobuf:"varint,5,opt,name=nounce,proto3" json:"nounce,omitempty"`                    // 本局對應的seed使用次數
	Result           string `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`                     // 本局結果 （贏的倍率）
	Begintime        uint64 `protobuf:"varint,7,opt,name=begintime,proto3" json:"begintime,omitempty"`              // 本局開始時間
	Gmcode           string `protobuf:"bytes,8,opt,name=gmcode,proto3" json:"gmcode,omitempty"`                     // 局號
	OrderStatus      uint32 `protobuf:"varint,9,opt,name=orderStatus,proto3" json:"orderStatus,omitempty"`          // 注單狀態
	GameFlag         uint32 `protobuf:"varint,10,opt,name=gameFlag,proto3" json:"gameFlag,omitempty"`               // 遊戲狀態
	Currency         string `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`                // 下注貨幣
	Betamount        string `protobuf:"bytes,12,opt,name=betamount,proto3" json:"betamount,omitempty"`              // 下注金額
	Wonamount        string `protobuf:"bytes,13,opt,name=wonamount,proto3" json:"wonamount,omitempty"`              // 下注總贏分
}

func (x *DIAMONDS_GAME_INFO) Reset() {
	*x = DIAMONDS_GAME_INFO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_diamonds_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIAMONDS_GAME_INFO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIAMONDS_GAME_INFO) ProtoMessage() {}

func (x *DIAMONDS_GAME_INFO) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_diamonds_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIAMONDS_GAME_INFO.ProtoReflect.Descriptor instead.
func (*DIAMONDS_GAME_INFO) Descriptor() ([]byte, []int) {
	return file_protobuf_diamonds_game_proto_rawDescGZIP(), []int{5}
}

func (x *DIAMONDS_GAME_INFO) GetPlaytype() string {
	if x != nil {
		return x.Playtype
	}
	return ""
}

func (x *DIAMONDS_GAME_INFO) GetClientSeed() string {
	if x != nil {
		return x.ClientSeed
	}
	return ""
}

func (x *DIAMONDS_GAME_INFO) GetHashedServerSeed() string {
	if x != nil {
		return x.HashedServerSeed
	}
	return ""
}

func (x *DIAMONDS_GAME_INFO) GetRealServerSeed() string {
	if x != nil {
		return x.RealServerSeed
	}
	return ""
}

func (x *DIAMONDS_GAME_INFO) GetNounce() uint32 {
	if x != nil {
		return x.Nounce
	}
	return 0
}

func (x *DIAMONDS_GAME_INFO) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *DIAMONDS_GAME_INFO) GetBegintime() uint64 {
	if x != nil {
		return x.Begintime
	}
	return 0
}

func (x *DIAMONDS_GAME_INFO) GetGmcode() string {
	if x != nil {
		return x.Gmcode
	}
	return ""
}

func (x *DIAMONDS_GAME_INFO) GetOrderStatus() uint32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *DIAMONDS_GAME_INFO) GetGameFlag() uint32 {
	if x != nil {
		return x.GameFlag
	}
	return 0
}

func (x *DIAMONDS_GAME_INFO) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DIAMONDS_GAME_INFO) GetBetamount() string {
	if x != nil {
		return x.Betamount
	}
	return ""
}

func (x *DIAMONDS_GAME_INFO) GetWonamount() string {
	if x != nil {
		return x.Wonamount
	}
	return ""
}

type DIAMONDS_GAME_INFO_LIST struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tableid string                `protobuf:"bytes,1,opt,name=tableid,proto3" json:"tableid,omitempty"` // table 資訊
	List    []*DIAMONDS_GAME_INFO `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`       // 遊戲資訊
}

func (x *DIAMONDS_GAME_INFO_LIST) Reset() {
	*x = DIAMONDS_GAME_INFO_LIST{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_diamonds_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIAMONDS_GAME_INFO_LIST) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIAMONDS_GAME_INFO_LIST) ProtoMessage() {}

func (x *DIAMONDS_GAME_INFO_LIST) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_diamonds_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIAMONDS_GAME_INFO_LIST.ProtoReflect.Descriptor instead.
func (*DIAMONDS_GAME_INFO_LIST) Descriptor() ([]byte, []int) {
	return file_protobuf_diamonds_game_proto_rawDescGZIP(), []int{6}
}

func (x *DIAMONDS_GAME_INFO_LIST) GetTableid() string {
	if x != nil {
		return x.Tableid
	}
	return ""
}

func (x *DIAMONDS_GAME_INFO_LIST) GetList() []*DIAMONDS_GAME_INFO {
	if x != nil {
		return x.List
	}
	return nil
}

var File_protobuf_diamonds_game_proto protoreflect.FileDescriptor

var file_protobuf_diamonds_game_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x73, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x79, 0x0a, 0x0f, 0x44, 0x49, 0x41, 0x4d,
	0x4f, 0x4e, 0x44, 0x53, 0x5f, 0x54, 0x53, 0x5f, 0x42, 0x45, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x22, 0xbe, 0x02, 0x0a, 0x10, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53,
	0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x65, 0x74, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62,
	0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x17, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53,
	0x5f, 0x54, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x65, 0x65, 0x64, 0x22, 0x94, 0x03, 0x0a, 0x18, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e,
	0x44, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x70, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x65, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe9, 0x01, 0x0a,
	0x0d, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x22, 0xa0, 0x03, 0x0a, 0x12, 0x44, 0x49, 0x41,
	0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x6d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x77, 0x6f, 0x6e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x77, 0x6f, 0x6e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x17, 0x44,
	0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e,
	0x44, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x69, 0x73, 0x79, 0x61, 0x6f, 0x72, 0x61, 0x6e, 0x35, 0x31, 0x2f, 0x47, 0x6f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_diamonds_game_proto_rawDescOnce sync.Once
	file_protobuf_diamonds_game_proto_rawDescData = file_protobuf_diamonds_game_proto_rawDesc
)

func file_protobuf_diamonds_game_proto_rawDescGZIP() []byte {
	file_protobuf_diamonds_game_proto_rawDescOnce.Do(func() {
		file_protobuf_diamonds_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_diamonds_game_proto_rawDescData)
	})
	return file_protobuf_diamonds_game_proto_rawDescData
}

var file_protobuf_diamonds_game_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_protobuf_diamonds_game_proto_goTypes = []interface{}{
	(*DIAMONDS_TS_BET)(nil),          // 0: diamonds.DIAMONDS_TS_BET
	(*DIAMONDS_BET_RES)(nil),         // 1: diamonds.DIAMONDS_BET_RES
	(*DIAMONDS_TS_CHANGE_SEED)(nil),  // 2: diamonds.DIAMONDS_TS_CHANGE_SEED
	(*DIAMONDS_CHANGE_SEED_RES)(nil), // 3: diamonds.DIAMONDS_CHANGE_SEED_RES
	(*DIAMONDS_INFO)(nil),            // 4: diamonds.DIAMONDS_INFO
	(*DIAMONDS_GAME_INFO)(nil),       // 5: diamonds.DIAMONDS_GAME_INFO
	(*DIAMONDS_GAME_INFO_LIST)(nil),  // 6: diamonds.DIAMONDS_GAME_INFO_LIST
}
var file_protobuf_diamonds_game_proto_depIdxs = []int32{
	5, // 0: diamonds.DIAMONDS_GAME_INFO_LIST.list:type_name -> diamonds.DIAMONDS_GAME_INFO
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_protobuf_diamonds_game_proto_init() }
func file_protobuf_diamonds_game_proto_init() {
	if File_protobuf_diamonds_game_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_diamonds_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIAMONDS_TS_BET); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_diamonds_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIAMONDS_BET_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_diamonds_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIAMONDS_TS_CHANGE_SEED); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_diamonds_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIAMONDS_CHANGE_SEED_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_diamonds_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIAMONDS_INFO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_diamonds_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIAMONDS_GAME_INFO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_diamonds_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIAMONDS_GAME_INFO_LIST); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_diamonds_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_diamonds_game_proto_goTypes,
		DependencyIndexes: file_protobuf_diamonds_game_proto_depIdxs,
		MessageInfos:      file_protobuf_diamonds_game_proto_msgTypes,
	}.Build()
	File_protobuf_diamonds_game_proto = out.File
	file_protobuf_diamonds_game_proto_rawDesc = nil
	file_protobuf_diamonds_game_proto_goTypes = nil
	file_protobuf_diamonds_game_proto_depIdxs = nil
}
