// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: protobuf/common.proto

package protobuf

import (
	diamonds "github.com/lisyaoran51/GoGameServerTest/protobuf/diamonds"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 共通標頭檔
//
// 傳送與接收的前置標頭檔，用以告知後方內容該如何解析。
type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // UUID
	// Types that are assignable to Payload:
	//	*Header_Heartbeat
	//	*Header_TsCommonEnterTable
	//	*Header_CommonEnterTableRes
	//	*Header_TsCommonLeaveTable
	//	*Header_CommonLeaveTableRes
	//	*Header_TableList
	//	*Header_TableCurrencyInfo
	//	*Header_PlayerCanUseCurrencyData
	//	*Header_KickPlayer
	//	*Header_IdleKickNotice
	//	*Header_ChatId
	//	*Header_TsSentChatMessage
	//	*Header_SentChatMessageR
	//	*Header_ChatMessageBoardcast
	//	*Header_KickTable
	//	*Header_CurrencyDataList
	//	*Header_TsRefreshCurrencyDataList
	//	*Header_ProductExchangeRate
	//	*Header_ClientUsingCurrency
	//	*Header_ClientConnectRequest
	//	*Header_ClientConnectResponse
	//	*Header_GateLoginRequest
	//	*Header_GateLoginResponse
	//	*Header_CashApiBetDeduct
	//	*Header_CashApiBetDeductRes
	//	*Header_CashApiWinAccount
	//	*Header_CashApiWinAccountRes
	//	*Header_CashApiCancelAccount
	//	*Header_CashApiCancelAccountRes
	//	*Header_CashApiRollbackAccount
	//	*Header_CashApiRollbackAccountRes
	//	*Header_CashApiQueryCurrencyList
	//	*Header_CashApiQueryCurrencyListRes
	//	*Header_DiamondsCHeader
	Payload isHeader_Payload `protobuf_oneof:"payload"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_protobuf_common_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *Header) GetPayload() isHeader_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Header) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetPayload().(*Header_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *Header) GetTsCommonEnterTable() *TS_CommonEnterTable {
	if x, ok := x.GetPayload().(*Header_TsCommonEnterTable); ok {
		return x.TsCommonEnterTable
	}
	return nil
}

func (x *Header) GetCommonEnterTableRes() *CommonEnterTableRes {
	if x, ok := x.GetPayload().(*Header_CommonEnterTableRes); ok {
		return x.CommonEnterTableRes
	}
	return nil
}

func (x *Header) GetTsCommonLeaveTable() *TS_CommonLeaveTable {
	if x, ok := x.GetPayload().(*Header_TsCommonLeaveTable); ok {
		return x.TsCommonLeaveTable
	}
	return nil
}

func (x *Header) GetCommonLeaveTableRes() *CommonLeaveTableRes {
	if x, ok := x.GetPayload().(*Header_CommonLeaveTableRes); ok {
		return x.CommonLeaveTableRes
	}
	return nil
}

func (x *Header) GetTableList() *TableList {
	if x, ok := x.GetPayload().(*Header_TableList); ok {
		return x.TableList
	}
	return nil
}

func (x *Header) GetTableCurrencyInfo() *TableCurrencyInfo {
	if x, ok := x.GetPayload().(*Header_TableCurrencyInfo); ok {
		return x.TableCurrencyInfo
	}
	return nil
}

func (x *Header) GetPlayerCanUseCurrencyData() *PlayerCanUseCurrencyData {
	if x, ok := x.GetPayload().(*Header_PlayerCanUseCurrencyData); ok {
		return x.PlayerCanUseCurrencyData
	}
	return nil
}

func (x *Header) GetKickPlayer() *KickPlayer {
	if x, ok := x.GetPayload().(*Header_KickPlayer); ok {
		return x.KickPlayer
	}
	return nil
}

func (x *Header) GetIdleKickNotice() *IdleKickNotice {
	if x, ok := x.GetPayload().(*Header_IdleKickNotice); ok {
		return x.IdleKickNotice
	}
	return nil
}

func (x *Header) GetChatId() *ChatID {
	if x, ok := x.GetPayload().(*Header_ChatId); ok {
		return x.ChatId
	}
	return nil
}

func (x *Header) GetTsSentChatMessage() *TS_SentChatMessage {
	if x, ok := x.GetPayload().(*Header_TsSentChatMessage); ok {
		return x.TsSentChatMessage
	}
	return nil
}

func (x *Header) GetSentChatMessageR() *SentChatMessageR {
	if x, ok := x.GetPayload().(*Header_SentChatMessageR); ok {
		return x.SentChatMessageR
	}
	return nil
}

func (x *Header) GetChatMessageBoardcast() *ChatMessageBoardcast {
	if x, ok := x.GetPayload().(*Header_ChatMessageBoardcast); ok {
		return x.ChatMessageBoardcast
	}
	return nil
}

func (x *Header) GetKickTable() *KickTable {
	if x, ok := x.GetPayload().(*Header_KickTable); ok {
		return x.KickTable
	}
	return nil
}

func (x *Header) GetCurrencyDataList() *CurrencyDataList {
	if x, ok := x.GetPayload().(*Header_CurrencyDataList); ok {
		return x.CurrencyDataList
	}
	return nil
}

func (x *Header) GetTsRefreshCurrencyDataList() *TS_RefreshCurrencyDataList {
	if x, ok := x.GetPayload().(*Header_TsRefreshCurrencyDataList); ok {
		return x.TsRefreshCurrencyDataList
	}
	return nil
}

func (x *Header) GetProductExchangeRate() *ProductExchangeRate {
	if x, ok := x.GetPayload().(*Header_ProductExchangeRate); ok {
		return x.ProductExchangeRate
	}
	return nil
}

func (x *Header) GetClientUsingCurrency() *ClientUsingCurrency {
	if x, ok := x.GetPayload().(*Header_ClientUsingCurrency); ok {
		return x.ClientUsingCurrency
	}
	return nil
}

func (x *Header) GetClientConnectRequest() *ClientConnectRequest {
	if x, ok := x.GetPayload().(*Header_ClientConnectRequest); ok {
		return x.ClientConnectRequest
	}
	return nil
}

func (x *Header) GetClientConnectResponse() *ClientConnectResponse {
	if x, ok := x.GetPayload().(*Header_ClientConnectResponse); ok {
		return x.ClientConnectResponse
	}
	return nil
}

func (x *Header) GetGateLoginRequest() *GateLoginRequest {
	if x, ok := x.GetPayload().(*Header_GateLoginRequest); ok {
		return x.GateLoginRequest
	}
	return nil
}

func (x *Header) GetGateLoginResponse() *GateLoginResponse {
	if x, ok := x.GetPayload().(*Header_GateLoginResponse); ok {
		return x.GateLoginResponse
	}
	return nil
}

func (x *Header) GetCashApiBetDeduct() *CASH_API_BET_DEDUCT {
	if x, ok := x.GetPayload().(*Header_CashApiBetDeduct); ok {
		return x.CashApiBetDeduct
	}
	return nil
}

func (x *Header) GetCashApiBetDeductRes() *CASH_API_BET_DEDUCT_RES {
	if x, ok := x.GetPayload().(*Header_CashApiBetDeductRes); ok {
		return x.CashApiBetDeductRes
	}
	return nil
}

func (x *Header) GetCashApiWinAccount() *CASH_API_WIN_ACCOUNT {
	if x, ok := x.GetPayload().(*Header_CashApiWinAccount); ok {
		return x.CashApiWinAccount
	}
	return nil
}

func (x *Header) GetCashApiWinAccountRes() *CASH_API_WIN_ACCOUNT_RES {
	if x, ok := x.GetPayload().(*Header_CashApiWinAccountRes); ok {
		return x.CashApiWinAccountRes
	}
	return nil
}

func (x *Header) GetCashApiCancelAccount() *CASH_API_CANCEL_ACCOUNT {
	if x, ok := x.GetPayload().(*Header_CashApiCancelAccount); ok {
		return x.CashApiCancelAccount
	}
	return nil
}

func (x *Header) GetCashApiCancelAccountRes() *CASH_API_CANCEL_ACCOUNT_RES {
	if x, ok := x.GetPayload().(*Header_CashApiCancelAccountRes); ok {
		return x.CashApiCancelAccountRes
	}
	return nil
}

func (x *Header) GetCashApiRollbackAccount() *CASH_API_ROLLBACK_ACCOUNT {
	if x, ok := x.GetPayload().(*Header_CashApiRollbackAccount); ok {
		return x.CashApiRollbackAccount
	}
	return nil
}

func (x *Header) GetCashApiRollbackAccountRes() *CASH_API_ROLLBACK_ACCOUNT_RES {
	if x, ok := x.GetPayload().(*Header_CashApiRollbackAccountRes); ok {
		return x.CashApiRollbackAccountRes
	}
	return nil
}

func (x *Header) GetCashApiQueryCurrencyList() *CASH_API_QUERY_CURRENCY_LIST {
	if x, ok := x.GetPayload().(*Header_CashApiQueryCurrencyList); ok {
		return x.CashApiQueryCurrencyList
	}
	return nil
}

func (x *Header) GetCashApiQueryCurrencyListRes() *CASH_API_QUERY_CURRENCY_LIST_RES {
	if x, ok := x.GetPayload().(*Header_CashApiQueryCurrencyListRes); ok {
		return x.CashApiQueryCurrencyListRes
	}
	return nil
}

func (x *Header) GetDiamondsCHeader() *diamonds.CHeader {
	if x, ok := x.GetPayload().(*Header_DiamondsCHeader); ok {
		return x.DiamondsCHeader
	}
	return nil
}

type isHeader_Payload interface {
	isHeader_Payload()
}

type Header_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,3,opt,name=heartbeat,proto3,oneof"` // 心跳包
}

type Header_TsCommonEnterTable struct {
	//table
	TsCommonEnterTable *TS_CommonEnterTable `protobuf:"bytes,11,opt,name=tsCommonEnterTable,proto3,oneof"`
}

type Header_CommonEnterTableRes struct {
	CommonEnterTableRes *CommonEnterTableRes `protobuf:"bytes,12,opt,name=commonEnterTableRes,proto3,oneof"`
}

type Header_TsCommonLeaveTable struct {
	TsCommonLeaveTable *TS_CommonLeaveTable `protobuf:"bytes,13,opt,name=tsCommonLeaveTable,proto3,oneof"`
}

type Header_CommonLeaveTableRes struct {
	CommonLeaveTableRes *CommonLeaveTableRes `protobuf:"bytes,14,opt,name=commonLeaveTableRes,proto3,oneof"`
}

type Header_TableList struct {
	TableList *TableList `protobuf:"bytes,15,opt,name=tableList,proto3,oneof"`
}

type Header_TableCurrencyInfo struct {
	TableCurrencyInfo *TableCurrencyInfo `protobuf:"bytes,16,opt,name=tableCurrencyInfo,proto3,oneof"`
}

type Header_PlayerCanUseCurrencyData struct {
	PlayerCanUseCurrencyData *PlayerCanUseCurrencyData `protobuf:"bytes,17,opt,name=playerCanUseCurrencyData,proto3,oneof"`
}

type Header_KickPlayer struct {
	//Game
	KickPlayer *KickPlayer `protobuf:"bytes,30,opt,name=kickPlayer,proto3,oneof"`
}

type Header_IdleKickNotice struct {
	IdleKickNotice *IdleKickNotice `protobuf:"bytes,31,opt,name=idleKickNotice,proto3,oneof"`
}

type Header_ChatId struct {
	ChatId *ChatID `protobuf:"bytes,32,opt,name=chatId,proto3,oneof"`
}

type Header_TsSentChatMessage struct {
	TsSentChatMessage *TS_SentChatMessage `protobuf:"bytes,33,opt,name=tsSentChatMessage,proto3,oneof"`
}

type Header_SentChatMessageR struct {
	SentChatMessageR *SentChatMessageR `protobuf:"bytes,34,opt,name=sentChatMessageR,proto3,oneof"`
}

type Header_ChatMessageBoardcast struct {
	ChatMessageBoardcast *ChatMessageBoardcast `protobuf:"bytes,35,opt,name=chatMessageBoardcast,proto3,oneof"`
}

type Header_KickTable struct {
	KickTable *KickTable `protobuf:"bytes,36,opt,name=kickTable,proto3,oneof"`
}

type Header_CurrencyDataList struct {
	CurrencyDataList *CurrencyDataList `protobuf:"bytes,37,opt,name=currencyDataList,proto3,oneof"`
}

type Header_TsRefreshCurrencyDataList struct {
	TsRefreshCurrencyDataList *TS_RefreshCurrencyDataList `protobuf:"bytes,38,opt,name=tsRefreshCurrencyDataList,proto3,oneof"`
}

type Header_ProductExchangeRate struct {
	//exchange
	ProductExchangeRate *ProductExchangeRate `protobuf:"bytes,50,opt,name=productExchangeRate,proto3,oneof"`
}

type Header_ClientUsingCurrency struct {
	ClientUsingCurrency *ClientUsingCurrency `protobuf:"bytes,51,opt,name=clientUsingCurrency,proto3,oneof"`
}

type Header_ClientConnectRequest struct {
	//Gate
	ClientConnectRequest *ClientConnectRequest `protobuf:"bytes,101,opt,name=clientConnectRequest,proto3,oneof"`
}

type Header_ClientConnectResponse struct {
	ClientConnectResponse *ClientConnectResponse `protobuf:"bytes,102,opt,name=clientConnectResponse,proto3,oneof"`
}

type Header_GateLoginRequest struct {
	//Gate <-> Game
	GateLoginRequest *GateLoginRequest `protobuf:"bytes,201,opt,name=gateLoginRequest,proto3,oneof"`
}

type Header_GateLoginResponse struct {
	GateLoginResponse *GateLoginResponse `protobuf:"bytes,202,opt,name=gateLoginResponse,proto3,oneof"`
}

type Header_CashApiBetDeduct struct {
	//game <-> gate to cash api
	CashApiBetDeduct *CASH_API_BET_DEDUCT `protobuf:"bytes,301,opt,name=cashApiBetDeduct,proto3,oneof"`
}

type Header_CashApiBetDeductRes struct {
	CashApiBetDeductRes *CASH_API_BET_DEDUCT_RES `protobuf:"bytes,302,opt,name=cashApiBetDeductRes,proto3,oneof"`
}

type Header_CashApiWinAccount struct {
	CashApiWinAccount *CASH_API_WIN_ACCOUNT `protobuf:"bytes,303,opt,name=cashApiWinAccount,proto3,oneof"`
}

type Header_CashApiWinAccountRes struct {
	CashApiWinAccountRes *CASH_API_WIN_ACCOUNT_RES `protobuf:"bytes,304,opt,name=cashApiWinAccountRes,proto3,oneof"`
}

type Header_CashApiCancelAccount struct {
	CashApiCancelAccount *CASH_API_CANCEL_ACCOUNT `protobuf:"bytes,305,opt,name=cashApiCancelAccount,proto3,oneof"`
}

type Header_CashApiCancelAccountRes struct {
	CashApiCancelAccountRes *CASH_API_CANCEL_ACCOUNT_RES `protobuf:"bytes,306,opt,name=cashApiCancelAccountRes,proto3,oneof"`
}

type Header_CashApiRollbackAccount struct {
	CashApiRollbackAccount *CASH_API_ROLLBACK_ACCOUNT `protobuf:"bytes,307,opt,name=cashApiRollbackAccount,proto3,oneof"`
}

type Header_CashApiRollbackAccountRes struct {
	CashApiRollbackAccountRes *CASH_API_ROLLBACK_ACCOUNT_RES `protobuf:"bytes,308,opt,name=cashApiRollbackAccountRes,proto3,oneof"`
}

type Header_CashApiQueryCurrencyList struct {
	CashApiQueryCurrencyList *CASH_API_QUERY_CURRENCY_LIST `protobuf:"bytes,309,opt,name=cashApiQueryCurrencyList,proto3,oneof"`
}

type Header_CashApiQueryCurrencyListRes struct {
	CashApiQueryCurrencyListRes *CASH_API_QUERY_CURRENCY_LIST_RES `protobuf:"bytes,310,opt,name=cashApiQueryCurrencyListRes,proto3,oneof"`
}

type Header_DiamondsCHeader struct {
	//diamonds header
	DiamondsCHeader *diamonds.CHeader `protobuf:"bytes,2081,opt,name=diamondsCHeader,proto3,oneof"`
}

func (*Header_Heartbeat) isHeader_Payload() {}

func (*Header_TsCommonEnterTable) isHeader_Payload() {}

func (*Header_CommonEnterTableRes) isHeader_Payload() {}

func (*Header_TsCommonLeaveTable) isHeader_Payload() {}

func (*Header_CommonLeaveTableRes) isHeader_Payload() {}

func (*Header_TableList) isHeader_Payload() {}

func (*Header_TableCurrencyInfo) isHeader_Payload() {}

func (*Header_PlayerCanUseCurrencyData) isHeader_Payload() {}

func (*Header_KickPlayer) isHeader_Payload() {}

func (*Header_IdleKickNotice) isHeader_Payload() {}

func (*Header_ChatId) isHeader_Payload() {}

func (*Header_TsSentChatMessage) isHeader_Payload() {}

func (*Header_SentChatMessageR) isHeader_Payload() {}

func (*Header_ChatMessageBoardcast) isHeader_Payload() {}

func (*Header_KickTable) isHeader_Payload() {}

func (*Header_CurrencyDataList) isHeader_Payload() {}

func (*Header_TsRefreshCurrencyDataList) isHeader_Payload() {}

func (*Header_ProductExchangeRate) isHeader_Payload() {}

func (*Header_ClientUsingCurrency) isHeader_Payload() {}

func (*Header_ClientConnectRequest) isHeader_Payload() {}

func (*Header_ClientConnectResponse) isHeader_Payload() {}

func (*Header_GateLoginRequest) isHeader_Payload() {}

func (*Header_GateLoginResponse) isHeader_Payload() {}

func (*Header_CashApiBetDeduct) isHeader_Payload() {}

func (*Header_CashApiBetDeductRes) isHeader_Payload() {}

func (*Header_CashApiWinAccount) isHeader_Payload() {}

func (*Header_CashApiWinAccountRes) isHeader_Payload() {}

func (*Header_CashApiCancelAccount) isHeader_Payload() {}

func (*Header_CashApiCancelAccountRes) isHeader_Payload() {}

func (*Header_CashApiRollbackAccount) isHeader_Payload() {}

func (*Header_CashApiRollbackAccountRes) isHeader_Payload() {}

func (*Header_CashApiQueryCurrencyList) isHeader_Payload() {}

func (*Header_CashApiQueryCurrencyListRes) isHeader_Payload() {}

func (*Header_DiamondsCHeader) isHeader_Payload() {}

// 心跳包
// 用以確認端點是否存活，收到的端點必須盡快回覆。
type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_protobuf_common_proto_rawDescGZIP(), []int{1}
}

var File_protobuf_common_proto protoreflect.FileDescriptor

var file_protobuf_common_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x15, 0x0a,
	0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x12, 0x4f, 0x0a, 0x12, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x53, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x12, 0x74,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x12, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x53, 0x5f, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x18, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61,
	0x6e, 0x55, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0a,
	0x6b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4b, 0x69, 0x63, 0x6b,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x69, 0x63, 0x6b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x64, 0x6c, 0x65, 0x4b, 0x69, 0x63, 0x6b,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x4b, 0x69, 0x63, 0x6b,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x64, 0x6c, 0x65, 0x4b, 0x69,
	0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x11, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x53, 0x5f, 0x53, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x54, 0x0a, 0x14,
	0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x63, 0x61, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x69,
	0x63, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x64, 0x0a, 0x19, 0x74, 0x73, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x53, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x74, 0x73,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x54, 0x0a,
	0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10,
	0x67, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x67, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x67, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x11, 0x67, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69,
	0x42, 0x65, 0x74, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x41, 0x53, 0x48,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x44, 0x55, 0x43, 0x54, 0x48,
	0x00, 0x52, 0x10, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x42, 0x65, 0x74, 0x44, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x42, 0x65,
	0x74, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x41, 0x53,
	0x48, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x44, 0x55, 0x43, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x48, 0x00, 0x52, 0x13, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x42,
	0x65, 0x74, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x63,
	0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x57, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x57, 0x49, 0x4e, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x73, 0x68, 0x41,
	0x70, 0x69, 0x57, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x14,
	0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x57, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x50, 0x49, 0x5f,
	0x57, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x48,
	0x00, 0x52, 0x14, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x57, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x63, 0x61, 0x73, 0x68, 0x41,
	0x70, 0x69, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x48, 0x00, 0x52, 0x14, 0x63, 0x61, 0x73,
	0x68, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x62, 0x0a, 0x17, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x18, 0xb2, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x41, 0x53, 0x48, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x48, 0x00, 0x52, 0x17, 0x63, 0x61,
	0x73, 0x68, 0x41, 0x70, 0x69, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x16, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xb3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x48, 0x00, 0x52, 0x16, 0x63,
	0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x19, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x52, 0x4f,
	0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x48, 0x00, 0x52, 0x19, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x65, 0x0a, 0x18, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xb5, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x41,
	0x53, 0x48, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x48, 0x00, 0x52, 0x18, 0x63, 0x61,
	0x73, 0x68, 0x41, 0x70, 0x69, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x1b, 0x63, 0x61, 0x73, 0x68, 0x41, 0x70,
	0x69, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x61, 0x73, 0x68,
	0x41, 0x70, 0x69, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x73, 0x43, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0xa1, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x43, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73,
	0x43, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x0b, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42,
	0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69,
	0x73, 0x79, 0x61, 0x6f, 0x72, 0x61, 0x6e, 0x35, 0x31, 0x2f, 0x47, 0x6f, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_common_proto_rawDescOnce sync.Once
	file_protobuf_common_proto_rawDescData = file_protobuf_common_proto_rawDesc
)

func file_protobuf_common_proto_rawDescGZIP() []byte {
	file_protobuf_common_proto_rawDescOnce.Do(func() {
		file_protobuf_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_common_proto_rawDescData)
	})
	return file_protobuf_common_proto_rawDescData
}

var file_protobuf_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_protobuf_common_proto_goTypes = []interface{}{
	(*Header)(nil),                           // 0: protobuf.Header
	(*Heartbeat)(nil),                        // 1: protobuf.Heartbeat
	(*TS_CommonEnterTable)(nil),              // 2: protobuf.TS_CommonEnterTable
	(*CommonEnterTableRes)(nil),              // 3: protobuf.CommonEnterTableRes
	(*TS_CommonLeaveTable)(nil),              // 4: protobuf.TS_CommonLeaveTable
	(*CommonLeaveTableRes)(nil),              // 5: protobuf.CommonLeaveTableRes
	(*TableList)(nil),                        // 6: protobuf.TableList
	(*TableCurrencyInfo)(nil),                // 7: protobuf.TableCurrencyInfo
	(*PlayerCanUseCurrencyData)(nil),         // 8: protobuf.PlayerCanUseCurrencyData
	(*KickPlayer)(nil),                       // 9: protobuf.KickPlayer
	(*IdleKickNotice)(nil),                   // 10: protobuf.IdleKickNotice
	(*ChatID)(nil),                           // 11: protobuf.ChatID
	(*TS_SentChatMessage)(nil),               // 12: protobuf.TS_SentChatMessage
	(*SentChatMessageR)(nil),                 // 13: protobuf.SentChatMessageR
	(*ChatMessageBoardcast)(nil),             // 14: protobuf.ChatMessageBoardcast
	(*KickTable)(nil),                        // 15: protobuf.KickTable
	(*CurrencyDataList)(nil),                 // 16: protobuf.CurrencyDataList
	(*TS_RefreshCurrencyDataList)(nil),       // 17: protobuf.TS_RefreshCurrencyDataList
	(*ProductExchangeRate)(nil),              // 18: protobuf.ProductExchangeRate
	(*ClientUsingCurrency)(nil),              // 19: protobuf.ClientUsingCurrency
	(*ClientConnectRequest)(nil),             // 20: protobuf.ClientConnectRequest
	(*ClientConnectResponse)(nil),            // 21: protobuf.ClientConnectResponse
	(*GateLoginRequest)(nil),                 // 22: protobuf.GateLoginRequest
	(*GateLoginResponse)(nil),                // 23: protobuf.GateLoginResponse
	(*CASH_API_BET_DEDUCT)(nil),              // 24: protobuf.CASH_API_BET_DEDUCT
	(*CASH_API_BET_DEDUCT_RES)(nil),          // 25: protobuf.CASH_API_BET_DEDUCT_RES
	(*CASH_API_WIN_ACCOUNT)(nil),             // 26: protobuf.CASH_API_WIN_ACCOUNT
	(*CASH_API_WIN_ACCOUNT_RES)(nil),         // 27: protobuf.CASH_API_WIN_ACCOUNT_RES
	(*CASH_API_CANCEL_ACCOUNT)(nil),          // 28: protobuf.CASH_API_CANCEL_ACCOUNT
	(*CASH_API_CANCEL_ACCOUNT_RES)(nil),      // 29: protobuf.CASH_API_CANCEL_ACCOUNT_RES
	(*CASH_API_ROLLBACK_ACCOUNT)(nil),        // 30: protobuf.CASH_API_ROLLBACK_ACCOUNT
	(*CASH_API_ROLLBACK_ACCOUNT_RES)(nil),    // 31: protobuf.CASH_API_ROLLBACK_ACCOUNT_RES
	(*CASH_API_QUERY_CURRENCY_LIST)(nil),     // 32: protobuf.CASH_API_QUERY_CURRENCY_LIST
	(*CASH_API_QUERY_CURRENCY_LIST_RES)(nil), // 33: protobuf.CASH_API_QUERY_CURRENCY_LIST_RES
	(*diamonds.CHeader)(nil),                 // 34: diamonds.CHeader
}
var file_protobuf_common_proto_depIdxs = []int32{
	1,  // 0: protobuf.Header.heartbeat:type_name -> protobuf.Heartbeat
	2,  // 1: protobuf.Header.tsCommonEnterTable:type_name -> protobuf.TS_CommonEnterTable
	3,  // 2: protobuf.Header.commonEnterTableRes:type_name -> protobuf.CommonEnterTableRes
	4,  // 3: protobuf.Header.tsCommonLeaveTable:type_name -> protobuf.TS_CommonLeaveTable
	5,  // 4: protobuf.Header.commonLeaveTableRes:type_name -> protobuf.CommonLeaveTableRes
	6,  // 5: protobuf.Header.tableList:type_name -> protobuf.TableList
	7,  // 6: protobuf.Header.tableCurrencyInfo:type_name -> protobuf.TableCurrencyInfo
	8,  // 7: protobuf.Header.playerCanUseCurrencyData:type_name -> protobuf.PlayerCanUseCurrencyData
	9,  // 8: protobuf.Header.kickPlayer:type_name -> protobuf.KickPlayer
	10, // 9: protobuf.Header.idleKickNotice:type_name -> protobuf.IdleKickNotice
	11, // 10: protobuf.Header.chatId:type_name -> protobuf.ChatID
	12, // 11: protobuf.Header.tsSentChatMessage:type_name -> protobuf.TS_SentChatMessage
	13, // 12: protobuf.Header.sentChatMessageR:type_name -> protobuf.SentChatMessageR
	14, // 13: protobuf.Header.chatMessageBoardcast:type_name -> protobuf.ChatMessageBoardcast
	15, // 14: protobuf.Header.kickTable:type_name -> protobuf.KickTable
	16, // 15: protobuf.Header.currencyDataList:type_name -> protobuf.CurrencyDataList
	17, // 16: protobuf.Header.tsRefreshCurrencyDataList:type_name -> protobuf.TS_RefreshCurrencyDataList
	18, // 17: protobuf.Header.productExchangeRate:type_name -> protobuf.ProductExchangeRate
	19, // 18: protobuf.Header.clientUsingCurrency:type_name -> protobuf.ClientUsingCurrency
	20, // 19: protobuf.Header.clientConnectRequest:type_name -> protobuf.ClientConnectRequest
	21, // 20: protobuf.Header.clientConnectResponse:type_name -> protobuf.ClientConnectResponse
	22, // 21: protobuf.Header.gateLoginRequest:type_name -> protobuf.GateLoginRequest
	23, // 22: protobuf.Header.gateLoginResponse:type_name -> protobuf.GateLoginResponse
	24, // 23: protobuf.Header.cashApiBetDeduct:type_name -> protobuf.CASH_API_BET_DEDUCT
	25, // 24: protobuf.Header.cashApiBetDeductRes:type_name -> protobuf.CASH_API_BET_DEDUCT_RES
	26, // 25: protobuf.Header.cashApiWinAccount:type_name -> protobuf.CASH_API_WIN_ACCOUNT
	27, // 26: protobuf.Header.cashApiWinAccountRes:type_name -> protobuf.CASH_API_WIN_ACCOUNT_RES
	28, // 27: protobuf.Header.cashApiCancelAccount:type_name -> protobuf.CASH_API_CANCEL_ACCOUNT
	29, // 28: protobuf.Header.cashApiCancelAccountRes:type_name -> protobuf.CASH_API_CANCEL_ACCOUNT_RES
	30, // 29: protobuf.Header.cashApiRollbackAccount:type_name -> protobuf.CASH_API_ROLLBACK_ACCOUNT
	31, // 30: protobuf.Header.cashApiRollbackAccountRes:type_name -> protobuf.CASH_API_ROLLBACK_ACCOUNT_RES
	32, // 31: protobuf.Header.cashApiQueryCurrencyList:type_name -> protobuf.CASH_API_QUERY_CURRENCY_LIST
	33, // 32: protobuf.Header.cashApiQueryCurrencyListRes:type_name -> protobuf.CASH_API_QUERY_CURRENCY_LIST_RES
	34, // 33: protobuf.Header.diamondsCHeader:type_name -> diamonds.CHeader
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_protobuf_common_proto_init() }
func file_protobuf_common_proto_init() {
	if File_protobuf_common_proto != nil {
		return
	}
	file_protobuf_common_game_proto_init()
	file_protobuf_gate_proto_init()
	file_protobuf_gate_game_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protobuf_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protobuf_common_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Header_Heartbeat)(nil),
		(*Header_TsCommonEnterTable)(nil),
		(*Header_CommonEnterTableRes)(nil),
		(*Header_TsCommonLeaveTable)(nil),
		(*Header_CommonLeaveTableRes)(nil),
		(*Header_TableList)(nil),
		(*Header_TableCurrencyInfo)(nil),
		(*Header_PlayerCanUseCurrencyData)(nil),
		(*Header_KickPlayer)(nil),
		(*Header_IdleKickNotice)(nil),
		(*Header_ChatId)(nil),
		(*Header_TsSentChatMessage)(nil),
		(*Header_SentChatMessageR)(nil),
		(*Header_ChatMessageBoardcast)(nil),
		(*Header_KickTable)(nil),
		(*Header_CurrencyDataList)(nil),
		(*Header_TsRefreshCurrencyDataList)(nil),
		(*Header_ProductExchangeRate)(nil),
		(*Header_ClientUsingCurrency)(nil),
		(*Header_ClientConnectRequest)(nil),
		(*Header_ClientConnectResponse)(nil),
		(*Header_GateLoginRequest)(nil),
		(*Header_GateLoginResponse)(nil),
		(*Header_CashApiBetDeduct)(nil),
		(*Header_CashApiBetDeductRes)(nil),
		(*Header_CashApiWinAccount)(nil),
		(*Header_CashApiWinAccountRes)(nil),
		(*Header_CashApiCancelAccount)(nil),
		(*Header_CashApiCancelAccountRes)(nil),
		(*Header_CashApiRollbackAccount)(nil),
		(*Header_CashApiRollbackAccountRes)(nil),
		(*Header_CashApiQueryCurrencyList)(nil),
		(*Header_CashApiQueryCurrencyListRes)(nil),
		(*Header_DiamondsCHeader)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_common_proto_goTypes,
		DependencyIndexes: file_protobuf_common_proto_depIdxs,
		MessageInfos:      file_protobuf_common_proto_msgTypes,
	}.Build()
	File_protobuf_common_proto = out.File
	file_protobuf_common_proto_rawDesc = nil
	file_protobuf_common_proto_goTypes = nil
	file_protobuf_common_proto_depIdxs = nil
}
